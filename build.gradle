plugins {
	id 'org.springframework.boot' version '2.6.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'club.ryans'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def deploymentProperties = new Properties()
file('secret/deployment.properties').withInputStream {deploymentProperties.load(it) }

remotes {
	server {
		host = deploymentProperties.getProperty('hostname')
		user = deploymentProperties.getProperty('user')
		identity = file(deploymentProperties.getProperty('keyfile'))
	}
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'com.github.twitch4j:twitch4j:1.6.0'
	implementation 'mysql:mysql-connector-java'
	implementation 'org.apache.httpcomponents:httpclient:4.+'
	implementation 'org.jsoup:jsoup:1.+'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.springframework.session:spring-session-jdbc'

	implementation ('net.dv8tion:JDA:5.0.0-alpha.12') {
		exclude module: 'opus-java'
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

task configureResources {
	doFirst {
		def secretResourceDir = 'secret/local/resources'
		if (gradle.startParameter.taskNames.contains('bootJar')
				|| gradle.startParameter.taskNames.contains('assemble')
				|| gradle.startParameter.taskNames.contains('deploy')) {
			secretResourceDir = 'secret/deploy/resources'
		}
		sourceSets {
			main {
				resources {
					srcDirs 'src/main/resources', secretResourceDir
				}
			}
		}
	}
}

processResources {
	dependsOn(configureResources)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task deploy {
	group = 'application'
	description = 'Builds and uploads deployment jar to EC2 instance.'
	dependsOn(bootJar)

	doLast {
		println '< doing deploy of ' + bootJar.archiveFile.get().asFile.name
		ssh.run {
			session(remotes.server) {
				put from: bootJar.archiveFile.get().asFile, into: 'install-stfc'
				def result = execute 'sudo install-stfc/deploy.sh'
				println result
			}
		}
		println '> deploy done'
	}
}

task install {
	group = 'application'
	description = 'Installs the necessary files to a new server.'

	doLast {
		ssh.run {
			session(remotes.server) {
				execute 'sudo mkdir -p /var/stfc'
				execute 'mkdir -p install-stfc'
				put from: file('src/deploy/deploy.sh'), into: 'install-stfc/deploy.sh'
				execute 'chmod +x install-stfc/deploy.sh'
				put from: file('src/deploy/stfc.service'), into: 'install-stfc/stfc.service'
				execute 'sudo cp install-stfc/stfc.service /etc/systemd/system'
			}
		}
	}
}

